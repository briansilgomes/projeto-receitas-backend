// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace receitas.api.Migrations
{
    [DbContext(typeof(ReceitasDbContext))]
    partial class ReceitasDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("receitas.entidades.Category", b =>
                {
                    b.Property<int>("Idcategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcategory"), 1L, 1);

                    b.Property<string>("Namecategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idcategory");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Idcategory = 1,
                            Namecategory = "Carne"
                        },
                        new
                        {
                            Idcategory = 2,
                            Namecategory = "Peixe"
                        },
                        new
                        {
                            Idcategory = 3,
                            Namecategory = "Entradas"
                        },
                        new
                        {
                            Idcategory = 4,
                            Namecategory = "Sopas"
                        },
                        new
                        {
                            Idcategory = 5,
                            Namecategory = "Sobremesas"
                        });
                });

            modelBuilder.Entity("receitas.entidades.Comment", b =>
                {
                    b.Property<int>("Idcomment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcomment"), 1L, 1);

                    b.Property<int>("Classificationrecipe")
                        .HasColumnType("int");

                    b.Property<string>("Commentrecipe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateComment")
                        .HasColumnType("datetime2");

                    b.Property<int>("Idrecipe")
                        .HasColumnType("int");

                    b.Property<int>("Iduser")
                        .HasColumnType("int");

                    b.HasKey("Idcomment");

                    b.HasIndex("Idrecipe");

                    b.ToTable("Comentarios");

                    b.HasData(
                        new
                        {
                            Idcomment = 1,
                            Classificationrecipe = 5,
                            Commentrecipe = "Adorei! Fiz hoje e ficou ótimo, recomendo!",
                            DateComment = new DateTime(2022, 6, 30, 20, 11, 8, 453, DateTimeKind.Local).AddTicks(4012),
                            Idrecipe = 1,
                            Iduser = 3
                        });
                });

            modelBuilder.Entity("receitas.entidades.Difficulty", b =>
                {
                    b.Property<int>("Iddifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddifficulty"), 1L, 1);

                    b.Property<string>("Namedifficulty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Iddifficulty");

                    b.ToTable("Dificuldade");

                    b.HasData(
                        new
                        {
                            Iddifficulty = 1,
                            Namedifficulty = "Fácil"
                        },
                        new
                        {
                            Iddifficulty = 2,
                            Namedifficulty = "Médio"
                        },
                        new
                        {
                            Iddifficulty = 3,
                            Namedifficulty = "Difícil"
                        });
                });

            modelBuilder.Entity("receitas.entidades.Favorite", b =>
                {
                    b.Property<int>("Idfavorite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idfavorite"), 1L, 1);

                    b.Property<int>("Idrecipe")
                        .HasColumnType("int");

                    b.Property<int>("Iduser")
                        .HasColumnType("int");

                    b.HasKey("Idfavorite");

                    b.HasIndex("Idrecipe");

                    b.ToTable("Favoritos");

                    b.HasData(
                        new
                        {
                            Idfavorite = 1,
                            Idrecipe = 1,
                            Iduser = 2
                        });
                });

            modelBuilder.Entity("receitas.entidades.Highlight", b =>
                {
                    b.Property<int>("Idhighlight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idhighlight"), 1L, 1);

                    b.Property<int>("Idrecipe")
                        .HasColumnType("int");

                    b.HasKey("Idhighlight");

                    b.HasIndex("Idrecipe");

                    b.ToTable("Destaques");

                    b.HasData(
                        new
                        {
                            Idhighlight = 1,
                            Idrecipe = 1
                        },
                        new
                        {
                            Idhighlight = 2,
                            Idrecipe = 2
                        },
                        new
                        {
                            Idhighlight = 3,
                            Idrecipe = 3
                        },
                        new
                        {
                            Idhighlight = 4,
                            Idrecipe = 4
                        },
                        new
                        {
                            Idhighlight = 5,
                            Idrecipe = 5
                        });
                });

            modelBuilder.Entity("receitas.entidades.Ingredient", b =>
                {
                    b.Property<int>("Idingredient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idingredient"), 1L, 1);

                    b.Property<string>("Nameingredient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idingredient");

                    b.ToTable("Ingredientes");

                    b.HasData(
                        new
                        {
                            Idingredient = 1,
                            Nameingredient = "Bacalhau"
                        },
                        new
                        {
                            Idingredient = 2,
                            Nameingredient = "Batatas Palha"
                        },
                        new
                        {
                            Idingredient = 3,
                            Nameingredient = "Cebolas"
                        },
                        new
                        {
                            Idingredient = 4,
                            Nameingredient = "Alhos"
                        },
                        new
                        {
                            Idingredient = 5,
                            Nameingredient = "Azeite"
                        },
                        new
                        {
                            Idingredient = 6,
                            Nameingredient = "Ovos"
                        },
                        new
                        {
                            Idingredient = 7,
                            Nameingredient = "Sal"
                        },
                        new
                        {
                            Idingredient = 8,
                            Nameingredient = "Pimenta Branca"
                        },
                        new
                        {
                            Idingredient = 9,
                            Nameingredient = "Salsa"
                        },
                        new
                        {
                            Idingredient = 10,
                            Nameingredient = "Pimenta Preta"
                        },
                        new
                        {
                            Idingredient = 11,
                            Nameingredient = "Frango"
                        },
                        new
                        {
                            Idingredient = 12,
                            Nameingredient = "Margarina"
                        },
                        new
                        {
                            Idingredient = 13,
                            Nameingredient = "Cerveja"
                        },
                        new
                        {
                            Idingredient = 14,
                            Nameingredient = "Pimentão Doce"
                        },
                        new
                        {
                            Idingredient = 15,
                            Nameingredient = "PiriPiri"
                        },
                        new
                        {
                            Idingredient = 16,
                            Nameingredient = "Limões"
                        },
                        new
                        {
                            Idingredient = 17,
                            Nameingredient = "Sardinhas"
                        },
                        new
                        {
                            Idingredient = 18,
                            Nameingredient = "Batatas"
                        },
                        new
                        {
                            Idingredient = 19,
                            Nameingredient = "Pimento Vermelhos"
                        },
                        new
                        {
                            Idingredient = 20,
                            Nameingredient = "Pimento Verde"
                        },
                        new
                        {
                            Idingredient = 21,
                            Nameingredient = "Cebola Roxa"
                        },
                        new
                        {
                            Idingredient = 22,
                            Nameingredient = "Lulas"
                        },
                        new
                        {
                            Idingredient = 23,
                            Nameingredient = "Vinho Branco"
                        },
                        new
                        {
                            Idingredient = 24,
                            Nameingredient = "Massa de Pimentão"
                        },
                        new
                        {
                            Idingredient = 25,
                            Nameingredient = "Ketchup"
                        },
                        new
                        {
                            Idingredient = 26,
                            Nameingredient = "Polpa de Tomate"
                        },
                        new
                        {
                            Idingredient = 27,
                            Nameingredient = "Banha de Porco"
                        },
                        new
                        {
                            Idingredient = 28,
                            Nameingredient = "Louro"
                        },
                        new
                        {
                            Idingredient = 29,
                            Nameingredient = "Farinha sem Fermento"
                        },
                        new
                        {
                            Idingredient = 30,
                            Nameingredient = "Manteiga"
                        },
                        new
                        {
                            Idingredient = 31,
                            Nameingredient = "Leite"
                        },
                        new
                        {
                            Idingredient = 32,
                            Nameingredient = "Açucar"
                        },
                        new
                        {
                            Idingredient = 33,
                            Nameingredient = "Gelado"
                        },
                        new
                        {
                            Idingredient = 34,
                            Nameingredient = "Fruta"
                        });
                });

            modelBuilder.Entity("receitas.entidades.Permission", b =>
                {
                    b.Property<int>("Idpermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpermission"), 1L, 1);

                    b.Property<string>("Namepermission")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idpermission");

                    b.ToTable("Permissao");

                    b.HasData(
                        new
                        {
                            Idpermission = 1,
                            Namepermission = "Administrador"
                        },
                        new
                        {
                            Idpermission = 2,
                            Namepermission = "Utilizador"
                        });
                });

            modelBuilder.Entity("receitas.entidades.Recipe", b =>
                {
                    b.Property<int>("Idrecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idrecipe"), 1L, 1);

                    b.Property<DateTime>("Daterecipe")
                        .HasColumnType("datetime2");

                    b.Property<string>("Durationrecipe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Idcategory")
                        .HasColumnType("int");

                    b.Property<int>("Iddifficulty")
                        .HasColumnType("int");

                    b.Property<int>("Idstate")
                        .HasColumnType("int");

                    b.Property<int>("Iduser")
                        .HasColumnType("int");

                    b.Property<string>("Imagerecipe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namerecipe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preparationrecipe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Idrecipe");

                    b.HasIndex("Idcategory");

                    b.HasIndex("Iddifficulty");

                    b.HasIndex("Idstate");

                    b.ToTable("Receitas");

                    b.HasData(
                        new
                        {
                            Idrecipe = 1,
                            Daterecipe = new DateTime(2022, 6, 30, 20, 11, 8, 453, DateTimeKind.Local).AddTicks(3168),
                            Durationrecipe = "00:25",
                            Idcategory = 2,
                            Iddifficulty = 1,
                            Idstate = 2,
                            Iduser = 2,
                            Imagerecipe = "bacalhaubras.jpg",
                            Namerecipe = "Bacalhau à Brás",
                            Preparationrecipe = "1 - Se optou por utilizar bacalhau congelado, só precisa de o deixar descongelar e fica pronto a utilizar. Caso, prefira utilizar bacalhau salgado, deverá deixar a demolhar no minimo durante 20 a 24 horas em bastante água.2 - Escalde o bacalhau durante cerca de 10 minutos numa panela com água a ferver. Retire da água e deixe arrefecer um pouco antes de lhe retirar as peles e as espinhas. Agora já pode desfiá-lo em lascas.3 - Refogue as cebolas e os alhos no azeite, junte o bacalhau e deixe-o absorver um pouco o azeite durante 2 a 3 minutos.4 - Adicione depois a batata palha envolvendo bem.5 - Quando estiver quente, junte os ovos previamente batidos e temperados com sal e pimenta. Atenção porque se utilizar as batatas de pacote nem sequer necessita de adicionar sal.6 - Mantenha o lume baixo e envolva bem, mexendo sempre com uma colher de pau até os ovos ficarem com uma consistência semelhante á dos ovos mexidos.7 - Polvilhe com salsa picada e enfeite com azeitonas pretas. Sirva com salada de alface cortada em juliana grossa."
                        },
                        new
                        {
                            Idrecipe = 2,
                            Daterecipe = new DateTime(2022, 6, 30, 20, 11, 8, 453, DateTimeKind.Local).AddTicks(3344),
                            Durationrecipe = "01:40",
                            Idcategory = 1,
                            Iddifficulty = 1,
                            Idstate = 2,
                            Iduser = 2,
                            Imagerecipe = "frangonoforno.jpg",
                            Namerecipe = "Frango no Forno com limão e cerveja",
                            Preparationrecipe = "1 - Para preparar esta receita de frango, aqueça o forno a 170° C. Descasque os dentes de alho e coloque-os na picadora, bem como o azeite, o pimentão-doce, o piripiri e a cerveja. Ligue para triturar bem.2 - Coloque o frango num tabuleiro, barre-o com o preparado anterior, tempere-o com sal e pimenta e regue com o sumo dos limões.3 - Espalhe por cima a margarina cortada em cubos e leve ao forno durante 25 minutos ou até o frango ficar bem assado e tostadinho, virando-o de vez em quando. Sirva decorado a gosto, por exemplo com gomos de limão."
                        },
                        new
                        {
                            Idrecipe = 3,
                            Daterecipe = new DateTime(2022, 6, 30, 20, 11, 8, 453, DateTimeKind.Local).AddTicks(3548),
                            Durationrecipe = "00:50",
                            Idcategory = 2,
                            Iddifficulty = 2,
                            Idstate = 2,
                            Iduser = 2,
                            Imagerecipe = "lulasribeira.jpg",
                            Namerecipe = "Lulas à moda da Ribeira",
                            Preparationrecipe = "1 - Corte as lulas em pedaços e tempere-os com sal, o piripíri, a folha de louro, o alho picado, a massa de pimentão e o vinho branco. Deixe marinar.2 - Leve a lume médio um tacho com azeite. Quando estiver quente, junte as lulas com a marinada e cozinhe-as até estarem tenras.3 - Transfira as lulas para uma travessa de forno, junte o ketchup, a polpa de tomate e a banha e regue com bastante azeite. Tempere com sal e envolva tudo muito bem. Leve ao forno, pré-aquecido a 180ºC, durante cerca de 20 minutos. Sirva salpicado com salsa."
                        },
                        new
                        {
                            Idrecipe = 4,
                            Daterecipe = new DateTime(2022, 6, 30, 20, 11, 8, 453, DateTimeKind.Local).AddTicks(3676),
                            Durationrecipe = "01:10",
                            Idcategory = 2,
                            Iddifficulty = 1,
                            Idstate = 2,
                            Iduser = 2,
                            Imagerecipe = "sardinhasassadas.jpg",
                            Namerecipe = "Sardinhas assadas com salada de batata e pimentos",
                            Preparationrecipe = "1 - Pincele as sardinhas com azeite, tempere-as com sal grosso e grelhe-as, até ficarem douradas e cozinhadas.2 - Coza as batatinhas, com a pele, em água com sal. Escorra-as, deixe arrefecer e elimine a pele. Reserve.3 - Grelhe os pimentos, até a pele ficar queimada. Depois, coloque-os num saco de plástico e feche. Elimine-lhes a pele e as sementes e corte-os em tiras.4 - Corte as batatas em metades ou quartos e misture com os pimentos e a cebola roxa, previamente picada. Tempere com um fio de azeite, a salsa picada, sal e pimenta. Envolva, cuidadosamente, e sirva com as sardinhas."
                        },
                        new
                        {
                            Idrecipe = 5,
                            Daterecipe = new DateTime(2022, 6, 30, 20, 11, 8, 453, DateTimeKind.Local).AddTicks(3771),
                            Durationrecipe = "01:20",
                            Idcategory = 5,
                            Iddifficulty = 2,
                            Idstate = 2,
                            Iduser = 3,
                            Imagerecipe = "crepefrutas.jpg",
                            Namerecipe = "Crepes com fruta e gelado de baunilha",
                            Preparationrecipe = "1 - Coloque a farinha e um pouco de sal numa tigela. Junte o açúcar e, mexendo, adicione o leite aos poucos. Acrescente os ovos e mexa bem com uma vara de arames. Por fim, junte a manteiga derretida e mexa novamente.2 - Passe a massa anterior por um passador de rede e deixe repousar, durante 30 minutos, no frigorífico.3 - Após o tempo indicado, leve ao lume uma frigideira antiaderente grande e deixe aquecer.Unte - a com um pouco de manteiga e retire o excesso com uma folha de papel.4 - Espalhe uma concha de massa por toda a frigideira. Quando começar a dourar em volta, vire-a e deixe cozinhar desse lado. Retire para um prato e repita o procedimento até terminar a massa.5 - Descasque e corte fruta a gosto em pedaços. Recheie os crepes com a fruta, enrole e polvilhe com açúcar em pó. Sirva os crepes mornos ou frios, acompanhados com gelado de baunilha e decorados com hortelã."
                        });
                });

            modelBuilder.Entity("receitas.entidades.RecipeIngredient", b =>
                {
                    b.Property<int>("Idingredientrecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idingredientrecipe"), 1L, 1);

                    b.Property<int>("Idingredient")
                        .HasColumnType("int");

                    b.Property<int>("Idrecipe")
                        .HasColumnType("int");

                    b.Property<int>("Idunity")
                        .HasColumnType("int");

                    b.Property<int>("Quantityingredient")
                        .HasColumnType("int");

                    b.HasKey("Idingredientrecipe");

                    b.HasIndex("Idingredient");

                    b.HasIndex("Idrecipe");

                    b.HasIndex("Idunity");

                    b.ToTable("ReceitaIngredientes");

                    b.HasData(
                        new
                        {
                            Idingredientrecipe = 1,
                            Idingredient = 1,
                            Idrecipe = 1,
                            Idunity = 2,
                            Quantityingredient = 400
                        },
                        new
                        {
                            Idingredientrecipe = 2,
                            Idingredient = 2,
                            Idrecipe = 1,
                            Idunity = 2,
                            Quantityingredient = 500
                        },
                        new
                        {
                            Idingredientrecipe = 3,
                            Idingredient = 3,
                            Idrecipe = 1,
                            Idunity = 1,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 4,
                            Idingredient = 4,
                            Idrecipe = 1,
                            Idunity = 9,
                            Quantityingredient = 3
                        },
                        new
                        {
                            Idingredientrecipe = 5,
                            Idingredient = 5,
                            Idrecipe = 1,
                            Idunity = 7,
                            Quantityingredient = 3
                        },
                        new
                        {
                            Idingredientrecipe = 6,
                            Idingredient = 6,
                            Idrecipe = 1,
                            Idunity = 1,
                            Quantityingredient = 6
                        },
                        new
                        {
                            Idingredientrecipe = 7,
                            Idingredient = 7,
                            Idrecipe = 1,
                            Idunity = 10,
                            Quantityingredient = 0
                        },
                        new
                        {
                            Idingredientrecipe = 8,
                            Idingredient = 8,
                            Idrecipe = 1,
                            Idunity = 10,
                            Quantityingredient = 0
                        },
                        new
                        {
                            Idingredientrecipe = 9,
                            Idingredient = 9,
                            Idrecipe = 1,
                            Idunity = 10,
                            Quantityingredient = 0
                        },
                        new
                        {
                            Idingredientrecipe = 10,
                            Idingredient = 11,
                            Idrecipe = 2,
                            Idunity = 1,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 11,
                            Idingredient = 4,
                            Idrecipe = 2,
                            Idunity = 9,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 12,
                            Idingredient = 12,
                            Idrecipe = 2,
                            Idunity = 2,
                            Quantityingredient = 70
                        },
                        new
                        {
                            Idingredientrecipe = 13,
                            Idingredient = 5,
                            Idrecipe = 2,
                            Idunity = 4,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 14,
                            Idingredient = 13,
                            Idrecipe = 2,
                            Idunity = 4,
                            Quantityingredient = 3
                        },
                        new
                        {
                            Idingredientrecipe = 15,
                            Idingredient = 14,
                            Idrecipe = 2,
                            Idunity = 8,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 16,
                            Idingredient = 15,
                            Idrecipe = 2,
                            Idunity = 11,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 17,
                            Idingredient = 16,
                            Idrecipe = 2,
                            Idunity = 1,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 18,
                            Idingredient = 7,
                            Idrecipe = 2,
                            Idunity = 10,
                            Quantityingredient = 0
                        },
                        new
                        {
                            Idingredientrecipe = 19,
                            Idingredient = 10,
                            Idrecipe = 2,
                            Idunity = 10,
                            Quantityingredient = 0
                        },
                        new
                        {
                            Idingredientrecipe = 29,
                            Idingredient = 22,
                            Idrecipe = 3,
                            Idunity = 12,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 30,
                            Idingredient = 4,
                            Idrecipe = 3,
                            Idunity = 9,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 31,
                            Idingredient = 23,
                            Idrecipe = 3,
                            Idunity = 6,
                            Quantityingredient = 50
                        },
                        new
                        {
                            Idingredientrecipe = 32,
                            Idingredient = 24,
                            Idrecipe = 3,
                            Idunity = 7,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 33,
                            Idingredient = 25,
                            Idrecipe = 3,
                            Idunity = 7,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 34,
                            Idingredient = 26,
                            Idrecipe = 3,
                            Idunity = 7,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 35,
                            Idingredient = 27,
                            Idrecipe = 3,
                            Idunity = 7,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 36,
                            Idingredient = 15,
                            Idrecipe = 3,
                            Idunity = 8,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 37,
                            Idingredient = 28,
                            Idrecipe = 3,
                            Idunity = 1,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 20,
                            Idingredient = 17,
                            Idrecipe = 4,
                            Idunity = 2,
                            Quantityingredient = 800
                        },
                        new
                        {
                            Idingredientrecipe = 21,
                            Idingredient = 18,
                            Idrecipe = 4,
                            Idunity = 2,
                            Quantityingredient = 500
                        },
                        new
                        {
                            Idingredientrecipe = 22,
                            Idingredient = 19,
                            Idrecipe = 4,
                            Idunity = 1,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 23,
                            Idingredient = 20,
                            Idrecipe = 4,
                            Idunity = 1,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 24,
                            Idingredient = 21,
                            Idrecipe = 4,
                            Idunity = 1,
                            Quantityingredient = 1
                        },
                        new
                        {
                            Idingredientrecipe = 25,
                            Idingredient = 9,
                            Idrecipe = 4,
                            Idunity = 7,
                            Quantityingredient = 7
                        },
                        new
                        {
                            Idingredientrecipe = 41,
                            Idingredient = 29,
                            Idrecipe = 5,
                            Idunity = 2,
                            Quantityingredient = 140
                        },
                        new
                        {
                            Idingredientrecipe = 42,
                            Idingredient = 30,
                            Idrecipe = 5,
                            Idunity = 2,
                            Quantityingredient = 70
                        },
                        new
                        {
                            Idingredientrecipe = 43,
                            Idingredient = 6,
                            Idrecipe = 5,
                            Idunity = 1,
                            Quantityingredient = 2
                        },
                        new
                        {
                            Idingredientrecipe = 44,
                            Idingredient = 31,
                            Idrecipe = 5,
                            Idunity = 6,
                            Quantityingredient = 600
                        },
                        new
                        {
                            Idingredientrecipe = 45,
                            Idingredient = 32,
                            Idrecipe = 5,
                            Idunity = 7,
                            Quantityingredient = 3
                        },
                        new
                        {
                            Idingredientrecipe = 46,
                            Idingredient = 33,
                            Idrecipe = 5,
                            Idunity = 10,
                            Quantityingredient = 0
                        },
                        new
                        {
                            Idingredientrecipe = 47,
                            Idingredient = 34,
                            Idrecipe = 5,
                            Idunity = 10,
                            Quantityingredient = 0
                        },
                        new
                        {
                            Idingredientrecipe = 48,
                            Idingredient = 7,
                            Idrecipe = 5,
                            Idunity = 10,
                            Quantityingredient = 0
                        });
                });

            modelBuilder.Entity("receitas.entidades.State", b =>
                {
                    b.Property<int>("Idstate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idstate"), 1L, 1);

                    b.Property<string>("NameState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idstate");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Idstate = 1,
                            NameState = "Bloqueado"
                        },
                        new
                        {
                            Idstate = 2,
                            NameState = "Publicado"
                        },
                        new
                        {
                            Idstate = 6,
                            NameState = "Não Publicado"
                        },
                        new
                        {
                            Idstate = 7,
                            NameState = "Por Validar"
                        },
                        new
                        {
                            Idstate = 8,
                            NameState = "Ativo"
                        });
                });

            modelBuilder.Entity("receitas.entidades.Temp", b =>
                {
                    b.Property<int>("Idtemp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtemp"), 1L, 1);

                    b.Property<int>("Idingredient")
                        .HasColumnType("int");

                    b.Property<int>("Idunity")
                        .HasColumnType("int");

                    b.Property<int>("Iduser")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.HasKey("Idtemp");

                    b.HasIndex("Idingredient");

                    b.HasIndex("Idunity");

                    b.HasIndex("Iduser");

                    b.ToTable("Temporario");
                });

            modelBuilder.Entity("receitas.entidades.Unity", b =>
                {
                    b.Property<int>("Idunity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idunity"), 1L, 1);

                    b.Property<string>("Nameunity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Siglaunity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idunity");

                    b.ToTable("Unidade");

                    b.HasData(
                        new
                        {
                            Idunity = 1,
                            Nameunity = "Unidade",
                            Siglaunity = "Uni"
                        },
                        new
                        {
                            Idunity = 2,
                            Nameunity = "Gramas",
                            Siglaunity = "G"
                        },
                        new
                        {
                            Idunity = 3,
                            Nameunity = "Litro",
                            Siglaunity = "L"
                        },
                        new
                        {
                            Idunity = 4,
                            Nameunity = "Decilitro",
                            Siglaunity = "dL"
                        },
                        new
                        {
                            Idunity = 5,
                            Nameunity = "Centilitro",
                            Siglaunity = "cL"
                        },
                        new
                        {
                            Idunity = 6,
                            Nameunity = "Mililitro",
                            Siglaunity = "dL"
                        },
                        new
                        {
                            Idunity = 7,
                            Nameunity = "Colher de Sopa",
                            Siglaunity = "Colh"
                        },
                        new
                        {
                            Idunity = 8,
                            Nameunity = "Colher de Chá",
                            Siglaunity = "Colh Chá"
                        },
                        new
                        {
                            Idunity = 9,
                            Nameunity = "Dente",
                            Siglaunity = "Dent"
                        },
                        new
                        {
                            Idunity = 10,
                            Nameunity = "q.b.",
                            Siglaunity = "QB"
                        },
                        new
                        {
                            Idunity = 11,
                            Nameunity = "Colher de Café",
                            Siglaunity = "Colh CaF"
                        },
                        new
                        {
                            Idunity = 12,
                            Nameunity = "Kilo",
                            Siglaunity = "Kg"
                        });
                });

            modelBuilder.Entity("receitas.entidades.User", b =>
                {
                    b.Property<int>("Iduser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iduser"), 1L, 1);

                    b.Property<string>("Emailuser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Idpermission")
                        .HasColumnType("int");

                    b.Property<int>("Idstate")
                        .HasColumnType("int");

                    b.Property<string>("Passworduser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Userimage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("nameuser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Iduser");

                    b.HasIndex("Idpermission");

                    b.HasIndex("Idstate");

                    b.ToTable("Utilizadores");

                    b.HasData(
                        new
                        {
                            Iduser = 1,
                            Emailuser = "admin@receitas.pt",
                            Idpermission = 1,
                            Idstate = 8,
                            Passworduser = "123",
                            Userimage = "assets/imagepage/userimage.jpg",
                            nameuser = "Administrador"
                        },
                        new
                        {
                            Iduser = 2,
                            Emailuser = "briangomes@sapo.pt",
                            Idpermission = 1,
                            Idstate = 8,
                            Passworduser = "123",
                            Userimage = "assets/imagepage/userimage.jpg",
                            nameuser = "Brian Gomes"
                        },
                        new
                        {
                            Iduser = 3,
                            Emailuser = "catarinacorreia@sapo.pt",
                            Idpermission = 2,
                            Idstate = 8,
                            Passworduser = "123",
                            Userimage = "assets/imagepage/userimage.jpg",
                            nameuser = "Catarina Correia"
                        },
                        new
                        {
                            Iduser = 4,
                            Emailuser = "filipegomes@sapo.pt",
                            Idpermission = 2,
                            Idstate = 1,
                            Passworduser = "123",
                            Userimage = "assets/imagepage/userimage.jpg",
                            nameuser = "Filipe Gomes"
                        });
                });

            modelBuilder.Entity("receitas.entidades.Comment", b =>
                {
                    b.HasOne("receitas.entidades.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("Idrecipe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("receitas.entidades.Favorite", b =>
                {
                    b.HasOne("receitas.entidades.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("Idrecipe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("receitas.entidades.Highlight", b =>
                {
                    b.HasOne("receitas.entidades.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("Idrecipe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("receitas.entidades.Recipe", b =>
                {
                    b.HasOne("receitas.entidades.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Idcategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("receitas.entidades.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("Iddifficulty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("receitas.entidades.State", "State")
                        .WithMany()
                        .HasForeignKey("Idstate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("State");
                });

            modelBuilder.Entity("receitas.entidades.RecipeIngredient", b =>
                {
                    b.HasOne("receitas.entidades.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("Idingredient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("receitas.entidades.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("Idrecipe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("receitas.entidades.Unity", "Unity")
                        .WithMany()
                        .HasForeignKey("Idunity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("receitas.entidades.Temp", b =>
                {
                    b.HasOne("receitas.entidades.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("Idingredient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("receitas.entidades.Unity", "Unity")
                        .WithMany()
                        .HasForeignKey("Idunity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("receitas.entidades.User", "User")
                        .WithMany()
                        .HasForeignKey("Iduser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Unity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("receitas.entidades.User", b =>
                {
                    b.HasOne("receitas.entidades.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("Idpermission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("receitas.entidades.State", "State")
                        .WithMany()
                        .HasForeignKey("Idstate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("State");
                });
#pragma warning restore 612, 618
        }
    }
}
